---
title: "AC/ET text analysis"
output: html_notebook
---

Inspired by: https://i.redd.it/l1l031339vo11.jpg

# Load
```{r load_library}
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(lubridate))
```

```{r load_text}
history = read.table(file = "AC_ET_history.txt", 
                     sep = "\n", 
                     quote = "", 
                     stringsAsFactors = FALSE)
print(paste(nrow(history), "total entries in loaded text history"))

# Remove 'image omitted' entries
image_entries = dplyr::filter(history, grepl("image omitted", V1))
print(paste(nrow(image_entries), 
            "'image omitted' entries; removed; removed from dataset"))
history_a = dplyr::setdiff(history, image_entries)

# Remove 'Missed voice call' entries
missed_calls = dplyr::filter(history_a, grepl("â€ŽMissed voice call", V1))
print(paste(nrow(missed_calls), 
            "'Missed voice call' entries; removed from dataset"))
history_a = dplyr::setdiff(history_a, missed_calls)

# Remove 'audio omitted' entries
audio_entries = dplyr::filter(history_a, grepl("audio omitted", V1))
print(paste(nrow(audio_entries), 
            "'audio omitted' entries; removed from dataset"))
history_a = dplyr::setdiff(history_a, audio_entries)

# Remove 'video omitted' entries
video_entries = dplyr::filter(history_a, grepl("video omitted", V1))
print(paste(nrow(missed_calls), 
            "'video omitted' entries; removed from dataset"))
history_a = dplyr::setdiff(history_a, video_entries)

# Remove 'GIF omitted' entries
gif_entries = dplyr::filter(history_a, grepl("GIF omitted", V1))
print(paste(nrow(missed_calls), 
            "'GIF omitted' entries; removed from dataset"))
history_a = dplyr::setdiff(history_a, gif_entries)

# Remove 'document omitted' entries
doc_entries = dplyr::filter(history_a, grepl("document omitted", V1))
print(paste(nrow(doc_entries),
            "'document omitted' entries; removed from dataset"))
history_a = dplyr::setdiff(history_a, doc_entries)

print(paste(nrow(history_a), "entries after removing 'omitted' classification entries"))

```

Process rows that don't begin with [
```{r}
# Check what rows don't begin with "[" don't actually have the date-person-text
#  format that we are looking for each row
x = dplyr::filter(history_a, substring(V1,1,1) != "[")
print(paste(nrow(x), "entries don't start with '['"))
     
print("Entries that don't start with '[' but include the '[' character (potentially have a time - person - text entry in the loaded entry):")
View(dplyr::filter(x, grepl("\\[", V1)))
```

If a text entry doesn't start with "[", it was a new line within a longer text
append the entry to the previous entry.
```{r}
# Use a while loop to check each entry. If the entry doesn't start with "[",
#  then concatenate it to the previous entry
z = data.frame("V1" = NA)

print(Sys.time())
index = 1
while (index <= nrow(history_a)) {
     # Check if current entry doesn't start with "["
     if (index > 1 & substring(history_a$V1[index], 1, 1) != "[") {
          history_a$V1[index - 1] = paste(history_a$V1[index - 1],
                                          history_a$V1[index])
          
          # Recordkeeping purposes
          z = rbind(z, history_a[index,])
          
          # Remove the entry that just got attached
          history_a = history_a[-c(index), , drop = FALSE] #Drop keeps the data-
                                                            #frame format
     } else {
          index = index + 1
     }
     
     #if (index %% 1000 == 0) {
     #     print(index)
     #}
}
print(Sys.time())

z = z[!is.na(z$V1),] %>%
     as.data.frame()

print(paste(nrow(history_a),"entries after remerging lines that belong to the same message"))
```

Divide the entries into specific columns:  
-DATE  
-TIME  
-PERSON  
-TEXT  
```{r split_into_columns}
print(Sys.time())
history_a = history_a %>%
     rowwise() %>%
     mutate("DATE" = strsplit(V1, split = "]") %>% #Get Time section
                 unlist() %>%
                 .[1] %>%
                 strsplit(split = ",") %>% #Get date
                 unlist() %>%
                 .[1] %>%
                 substring(first = 2),
            "TIME" = strsplit(V1, split = "]") %>% #Get Time section
                 unlist() %>%
                 .[1] %>%
                 strsplit(split = ",") %>% #Get clock time
                 unlist() %>%
                 .[2] %>%
                 trimws(),
            "PERSON" = strsplit(V1, split = "]") %>% #Get Name section
                 unlist() %>%
                 .[2:length(.)] %>% #In case there is a "]" in the text, we need to restitch the string
                 paste(collapse = "]") %>% 
                 strsplit(split = ":") %>%
                 unlist() %>%
                 .[1] %>%
                 trimws() %>%
                 strsplit(split = " ") %>% #Keep first name only
                 unlist() %>%
                 .[1],
            "TEXT" = strsplit(V1, split = "]") %>% #Get Text section
                 unlist() %>%
                 .[2:length(.)] %>% #In case there is a "]" in the text, we need to restitch the string
                 paste(collapse = "]") %>% 
                 strsplit(split = ":") %>%
                 unlist() %>%
                 .[2:length(.)] %>% #In case there is a ":" in the text, we need to restitch the string
                 paste(collapse = ":") %>%
                 trimws()) %>%
     as.data.frame()
print(Sys.time())

history_a = history_a[,colnames(history_a) != "V1"]

write.csv(history_a, file = "history_draft_1.csv", row.names = FALSE)
#history_a = read.csv("20181002_history_draft.csv", stringsAsFactors = FALSE)

#Convert TIME to 24hr clock instead of AM/PM. And remove seconds
history_a = history_a %>%
     rowwise() %>%
     mutate(TIME = strptime(TIME, format = "%I:%M:%S %p") %>%
                 format(format = "%H:%M:%S")) %>%
     as.data.frame()
```


More cleanup:
-Remove PERSONs who are not ELAINE or AUSTIN (usually a result of quoting a
chat with someone else)  
-Remove emoticon characters  

```{r}
# Remove persons != Elaine or Austin
other_people = history_a[!(grepl("Elaine", history_a$PERSON) | 
                                grepl("Austin", history_a$PERSON)),]
history_a = dplyr::setdiff(history_a, other_people)
print(paste(nrow(other_people), "entries are quotes from others"))
print(paste(nrow(history_a), "entries directly said by Elaine or Austin"))

#Readjust "Â Austin" to "Austin
history_a[grepl("Â", history_a$PERSON),"PERSON"] = "Austin"

#Remove entries lacking english characters and digits; usually emoticons
history_a$TEXT = lapply(history_a$TEXT, 
                        iconv, from = "UTF-8", to = "ASCII", sub = "") %>%
     unlist()



# remove_odd_char = history_a[grepl("ðŸ˜™", history_a$TEXT),]
# history_a = history_a[!grepl("ðŸ˜™", history_a$TEXT),]
# print(paste("After removing 'ðŸ˜™' entries:", 
#             nrow(history_a), 
#             "text entries remaining"))
print(paste(nrow(history_a), "entries in text history"))
write.csv(history_a, file = "history_draft_2.csv", row.names = FALSE)
```

```{r}
# Remove any entries where TEXT == null
no_text = history_a[history_a$TEXT == "", ]
history_a = dplyr::setdiff(history_a, no_text)
print(paste(nrow(history_a), 
            "entries in text history after removing entries with no text"))

# More cleanup
#  Some entries are clearly quoted. They are converted with a format:
#  Date: m/y time
#  Time: NA
#  Person: person
#  Text: Text
index = 1
z = NA
print(Sys.time())
while (index < nrow(history_a)) {
     # Check if current entry follows the Date format
     if (index > 1 & is.na(history_a[index,"TIME"])) {
          #Combine the entry to one line and append to previous
          history_a[index-1, "TEXT"] = paste0(history_a[index-1,"TEXT"],
                                             " \n ",
                                             "[",
                                             history_a[index,"DATE"],
                                             "] ",
                                             history_a[index,"PERSON"],
                                             ": ",
                                             history_a[index,"TEXT"])
          # Recordkeeping purposes
          z = rbind(z, history_a[index,])
          
          # Remove the entry that just got attached
          history_a = history_a[-c(index), , drop = FALSE]
     } else {
          index = index + 1
     }
}
print(Sys.time())

print(paste(nrow(history_a),
            "entries after remerging lines that are the same quote"))

write.csv(history_a, file = "history_draft_3.csv", row.names = FALSE)
```


Extra columns: Isolate YEAR, HOUR, num_char, num_words
```{r}
history_a = read.csv("history_draft_3.csv", stringsAsFactors = FALSE)

for_analysis = history_a %>%
     rowwise() %>%
     mutate(YEAR = mdy(DATE) %>% year(),
            HOUR = strptime(TIME, "%H:%M:%S") %>% hour()) %>%
     as.data.frame()

for_analysis = for_analysis %>%
     rowwise() %>%
     mutate(num_char = nchar(TEXT),
            num_words = strsplit(TEXT, split = " ") %>%
                 unlist() %>%
                 length()) %>%
     as.data.frame()

write.csv(for_analysis, file = "history_draft_4.csv", row.names = FALSE)
```

# Initial plots
```{r load_clean_history}
for_analysis = read.csv("history_draft_4.csv", stringsAsFactors = FALSE)
```

# Texts sent: By person
```{r by_person}
# Plot how many texts were produced by each person
ggplot(data = for_analysis, aes(x = PERSON)) +
     geom_bar(aes(fill = PERSON))
```

# Texts sent: By year
```{r by_year}
a = table(for_analysis$PERSON, for_analysis$YEAR) %>%
     melt() %>%
     plyr::rename(c("Var1" = "PERSON",
                    "Var2" = "YEAR",
                    "value" = "COUNT"))

ggplot(data = a, aes(x = YEAR, y = COUNT, color = PERSON)) +
     geom_line()

ggplot(data = for_analysis, aes(x = YEAR, fill = PERSON)) +
     geom_bar()
```

```{r by_hour}
a = table(for_analysis$PERSON, for_analysis$HOUR) %>% 
     melt() %>% 
     plyr::rename(c("Var1" = "PERSON",
                    "Var2" = "HOUR",
                    "value" = "COUNT"))

ggplot(data = a, aes(x = HOUR, y = COUNT, color = PERSON)) +
     geom_line()
```


# Texts by length
```{r by_char_count}
ggplot(data = for_analysis, aes(x = PERSON, y = num_char, color = PERSON)) +
     geom_point()

ggplot(data = group_by(for_analysis, PERSON, YEAR) %>%
            summarise(mean_chars = mean(num_char)),
       aes(x = YEAR, y = mean_chars, color = PERSON)) +
     geom_point() +
     geom_line() +
     expand_limits(y = 0)
```

```{r by_word_count}
ggplot(data = for_analysis, aes(x = PERSON, y = num_words, color = PERSON)) +
     geom_point()

ggplot(data = group_by(for_analysis, PERSON, YEAR) %>%
            summarise(mean_words = mean(num_words)),
       aes(x = YEAR, y = mean_words, color = PERSON)) +
     geom_point() +
     geom_line() +
     expand_limits(y = 0)
```

