xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Austin")] %>%
.[order(.$Austin, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Austin), y = Austin)) +
geom_bar(stat = "identity", fill = "coral") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Austin")
print(p)
p = ggplot(data = LDR_words[,c("Word","Austin")] %>%
.[order(.$Austin, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Austin), y = Austin)) +
geom_bar(stat = "identity", fill = "orchid1") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Austin")
print(p)
p = ggplot(data = LDR_words[,c("Word","Austin")] %>%
.[order(.$Austin, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Austin), y = Austin)) +
geom_bar(stat = "identity", fill = "thistle1") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Austin")
print(p)
p = ggplot(data = LDR_words[,c("Word","Austin")] %>%
.[order(.$Austin, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Austin), y = Austin)) +
geom_bar(stat = "identity", fill = "plum1") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Austin")
print(p)
p = ggplot(data = LDR_words[,c("Word","Austin")] %>%
.[order(.$Austin, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Austin), y = Austin)) +
geom_bar(stat = "identity", fill = "lightcoral") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Austin")
print(p)
I
# Plot how many texts were produced by each person
ggplot(data = for_analysis, aes(x = PERSON)) +
geom_bar(aes(fill = PERSON)) +
xlab("") +
ylab("Number of messages") +
ggtitle("Number of messages sent by each person (total history)")
a = table(for_analysis$PERSON, for_analysis$YEAR) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "YEAR",
"value" = "COUNT"))
ggplot(data = a, aes(x = YEAR, y = COUNT, color = PERSON)) +
geom_line() +
xlab("Year") +
ylab("Number of messages sent") +
ggtitle("Number of messages sent by year")
a = table(for_analysis$PERSON, for_analysis$HOUR) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "HOUR",
"value" = "COUNT"))
ggplot(data = a, aes(x = HOUR, y = COUNT, color = PERSON)) +
geom_line() +
xlab("Hour of the day") +
ylab("Total number of text messages") +
ggtitle("Total number of text messages per hour of the day (all history)")
ggplot(data = for_analysis, aes(x = PERSON, y = num_char, color = PERSON)) +
geom_point() +
xlab("") +
ylab("Number of characters per text") +
ggtitle("Number of characters per text")
ggplot(data = group_by(for_analysis, PERSON, YEAR) %>%
summarise(mean_chars = mean(num_char)),
aes(x = YEAR, y = mean_chars, color = PERSON)) +
geom_point() +
geom_line() +
expand_limits(y = 0) +
xlab("Year") +
ylab("Average number of characters per text") +
ggtitle("Average number of characters per text by year")
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "turquoise3") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "turquoise4") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "turquoise") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "turquois2") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "turquoise2") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "turquoise3") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "turquoise4") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "turquoise5") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "turquoise") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "lightseagreen") +
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
p = ggplot(data = LDR_words[,c("Word","Elaine")] %>%
.[order(.$Elaine, decreasing = TRUE),] %>%
.[1:10,],
aes(x = reorder(Word, -Elaine), y = Elaine)) +
geom_bar(stat = "identity", fill = "cornflowerblue") + #lightseagreen
xlab("Word") +
ylab("Number of appearances") +
ggtitle("Most typed words by Elaine")
print(p)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(wordcloud))
suppressPackageStartupMessages(library(tm))
# suppressPackageStartupMessages(library(aws.s3))
# suppressPackageStartupMessages(library(data.table))
# suppressPackageStartupMessages(library(tableone))
# suppressPackageStartupMessages(library(janitor))
# suppressPackageStartupMessages(library(kableExtra))
# suppressPackageStartupMessages(library(knitr))
# suppressPackageStartupMessages(library(DT))
# suppressPackageStartupMessages(library(lazyeval))
# suppressPackageStartupMessages(library(lubridate))
history_a = read.csv("history_draft_3.csv", stringsAsFactors = FALSE)
for_analysis = history_a %>%
rowwise() %>%
mutate(YEAR = mdy(DATE) %>% year(),
HOUR = strptime(TIME, "%H:%M:%S") %>% hour()) %>%
as.data.frame()
for_analysis = for_analysis %>%
rowwise() %>%
mutate(num_char = nchar(TEXT),
num_words = strsplit(TEXT, split = " ") %>%
unlist() %>%
length(),
weekday = weekdays(as.Date(DATE))) %>%
as.data.frame()
z = for_analysis$DATE[1]
z
mdy(z)
weekdays(as.Date(mdy(z)))
weekdays(mdy(z))
for_analysis = for_analysis %>%
rowwise() %>%
mutate(num_char = nchar(TEXT),
num_words = strsplit(TEXT, split = " ") %>%
unlist() %>%
length(),
weekday = DATE %>%
mdy() %>%
weekdays()
) %>%
as.data.frame()
a = read.csv("history_draft_4.csv", stringsAsFactors = FALSE)
setwd(E:\Dropbox\DS\AC_ET_LDR)
setwd("E:/Dropbox/DS/AC_ET_LDR")
a = read.csv("history_draft_4.csv", stringsAsFactors = FALSE)
all.equal(a$DATE, for_analysis$DATE)
for (c in colnames(a)) {
print(all.equal(a[[c]], for_analysis[[c]]))
}
colnames(a)
colnames(for_analysis)
write.csv(for_analysis, file = "history_draft_4.csv", row.names = FALSE)
ggplot(data = for_analysis, aes(x = weekday, y = COUNT, color = PERSON)) +
geom_line() +
xlab("Day of the Week") +
ylab("Total number of text messages")
a = table(for_analysis$PERSON, for_analysis$weekday) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "weekday",
"value" = "COUNT"))
ggplot(data = for_analysis, aes(x = weekday, y = COUNT, color = PERSON)) +
geom_line() +
xlab("Day of the Week") +
ylab("Total number of text messages")
a = table(for_analysis$PERSON, for_analysis$weekday) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "weekday",
"value" = "COUNT"))
ggplot(data = a, aes(x = weekday, y = COUNT, color = PERSON)) +
geom_line() +
xlab("Day of the Week") +
ylab("Total number of text messages")
a
a = table(for_analysis$PERSON, for_analysis$weekday) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "weekday",
"value" = "COUNT"))
ggplot(data = a, aes(x = weekday, y = COUNT, color = PERSON)) +
geom_bar() +
xlab("Day of the Week") +
ylab("Total number of text messages")
a = table(for_analysis$PERSON, for_analysis$weekday) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "weekday",
"value" = "COUNT"))
ggplot(data = for_analysis, aes(x = weekday, color = PERSON)) +
geom_bar() +
xlab("Day of the Week") +
ylab("Total number of text messages")
a = table(for_analysis$PERSON, for_analysis$weekday) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "weekday",
"value" = "COUNT"))
ggplot(data = for_analysis, aes(x = weekday, fill = PERSON)) +
geom_bar() +
xlab("Day of the Week") +
ylab("Total number of text messages")
a = table(for_analysis$PERSON, for_analysis$weekday) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "weekday",
"value" = "COUNT"))
ggplot(data = for_analysis, aes(x = weekday, fill = PERSON)) +
geom_bar(position = position_dodge(width = 0.9)) +
xlab("Day of the Week") +
ylab("Total number of text messages")
a = table(for_analysis$PERSON, for_analysis$weekday) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "weekday",
"value" = "COUNT"))
ggplot(data = for_analysis, aes(x = weekday, fill = PERSON)) +
geom_bar(position = position_dodge(width = 0.5)) +
xlab("Day of the Week") +
ylab("Total number of text messages")
a = table(for_analysis$PERSON, for_analysis$weekday) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "weekday",
"value" = "COUNT"))
ggplot(data = for_analysis, aes(x = weekday, fill = PERSON)) +
geom_bar(position = position_dodge(width = 1)) +
xlab("Day of the Week") +
ylab("Total number of text messages")
a = table(for_analysis$PERSON, for_analysis$weekday) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "weekday",
"value" = "COUNT"))
ggplot(data = for_analysis, aes(x = weekday, fill = PERSON)) +
geom_bar(position = position_dodge(width = 1)) +
xlab("Day of the Week") +
ylab("Total number of text messages")
ggplot(data = for_analysis, aes(x = weekday)) +
geom_bar()
a = table(for_analysis$PERSON, for_analysis$weekday) %>%
melt() %>%
plyr::rename(c("Var1" = "PERSON",
"Var2" = "weekday",
"value" = "COUNT"))
a$weekday = factor(a$weekday,
levels = c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"))
ggplot(data = for_analysis, aes(x = weekday, fill = PERSON)) +
geom_bar(position = position_dodge(width = 1)) +
xlab("Day of the Week") +
ylab("Total number of text messages")
ggplot(data = for_analysis, aes(x = weekday)) +
geom_bar()
for_analysis$weekday = factor(for_analysis$weekday,
levels = c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"))
ggplot(data = for_analysis, aes(x = weekday, fill = PERSON)) +
geom_bar(position = position_dodge(width = 1)) +
xlab("Day of the Week") +
ylab("Total number of text messages")
ggplot(data = for_analysis, aes(x = weekday)) +
geom_bar()
install.packages("wordcloud")
install.packages("tm")
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(wordcloud))
suppressPackageStartupMessages(library(tm))
rewrite = FALSE
# suppressPackageStartupMessages(library(aws.s3))
# suppressPackageStartupMessages(library(data.table))
# suppressPackageStartupMessages(library(tableone))
# suppressPackageStartupMessages(library(janitor))
# suppressPackageStartupMessages(library(kableExtra))
# suppressPackageStartupMessages(library(knitr))
# suppressPackageStartupMessages(library(DT))
# suppressPackageStartupMessages(library(lazyeval))
# suppressPackageStartupMessages(library(lubridate))
history = read.table(file = "AC_ET_history.txt",
sep = "\n",
quote = "",
stringsAsFactors = FALSE)
cat(paste(nrow(history), "total entries in loaded text history"))
# Remove 'image omitted' entries
image_entries = dplyr::filter(history, grepl("image omitted", V1))
cat(paste(nrow(image_entries),
"'image omitted' entries; removed; removed from dataset"))
history_a = dplyr::setdiff(history, image_entries)
# Remove 'Missed voice call' entries
missed_calls = dplyr::filter(history_a, grepl("â€ŽMissed voice call", V1))
cat(paste(nrow(missed_calls),
"'Missed voice call' entries; removed from dataset"))
history_a = dplyr::setdiff(history_a, missed_calls)
# Remove 'audio omitted' entries
audio_entries = dplyr::filter(history_a, grepl("audio omitted", V1))
cat(paste(nrow(audio_entries),
"'audio omitted' entries; removed from dataset"))
history_a = dplyr::setdiff(history_a, audio_entries)
# Remove 'video omitted' entries
video_entries = dplyr::filter(history_a, grepl("video omitted", V1))
cat(paste(nrow(missed_calls),
"'video omitted' entries; removed from dataset"))
history_a = dplyr::setdiff(history_a, video_entries)
# Remove 'GIF omitted' entries
gif_entries = dplyr::filter(history_a, grepl("GIF omitted", V1))
cat(paste(nrow(missed_calls),
"'GIF omitted' entries; removed from dataset"))
history_a = dplyr::setdiff(history_a, gif_entries)
# Remove 'document omitted' entries
doc_entries = dplyr::filter(history_a, grepl("document omitted", V1))
cat(paste(nrow(doc_entries),
"'document omitted' entries; removed from dataset"))
history_a = dplyr::setdiff(history_a, doc_entries)
cat(paste(nrow(history_a), "entries after removing 'omitted' classification entries"))
# Check what rows don't begin with "[" don't actually have the date-person-text
#  format that we are looking for each row
x = dplyr::filter(history_a, substring(V1,1,1) != "[")
cat(paste(nrow(x), "entries don't start with '['"))
cat("Entries that don't start with '[' but include the '[' character (potentially have a time - person - text entry in the loaded entry):")
View(dplyr::filter(x, grepl("\\[", V1)))
# Check what rows don't begin with "[" don't actually have the date-person-text
#  format that we are looking for each row
x = dplyr::filter(history_a, substring(V1,1,1) != "[")
cat(paste(nrow(x), "entries don't start with '['"))
cat("Entries that don't start with '[' but include the '[' character (potentially have a time - person - text entry in the loaded entry):")
print(dplyr::filter(x, grepl("\\[", V1)) %>% data.table())
# Check what rows don't begin with "[" don't actually have the date-person-text
#  format that we are looking for each row
x = dplyr::filter(history_a, substring(V1,1,1) != "[")
cat(paste(nrow(x), "entries don't start with '['"))
cat("Entries that don't start with '[' but include the '[' character (potentially have a time - person - text entry in the loaded entry):")
print(dplyr::filter(x, grepl("\\[", V1)) %>% as.data.table())
library(data.table)
# Check what rows don't begin with "[" don't actually have the date-person-text
#  format that we are looking for each row
x = dplyr::filter(history_a, substring(V1,1,1) != "[")
cat(paste(nrow(x), "entries don't start with '['"))
cat("Entries that don't start with '[' but include the '[' character (potentially have a time - person - text entry in the loaded entry):")
print(dplyr::filter(x, grepl("\\[", V1)) %>% data.table())
# If a text entry doesn't start with "[", it was a new line within a longer text
#  append the entry to the previous entry.
# Use a while loop to check each entry. If the entry doesn't start with "[",
#  then concatenate it to the previous entry
z = data.frame("V1" = NA)
print(Sys.time())
index = 1
while (index <= nrow(history_a)) {
# Check if current entry doesn't start with "["
if (index > 1 & substring(history_a$V1[index], 1, 1) != "[") {
history_a$V1[index - 1] = paste(history_a$V1[index - 1],
history_a$V1[index])
# Recordkeeping purposes
z = rbind(z, history_a[index,])
# Remove the entry that just got attached
history_a = history_a[-c(index), , drop = FALSE] #Drop keeps the data-
#frame format
} else {
index = index + 1
}
#if (index %% 1000 == 0) {
#     print(index)
#}
}
print(Sys.time())
z = z[!is.na(z$V1),] %>%
as.data.frame()
cat(paste(nrow(history_a),"entries after remerging lines that belong to the same message"))
# Split into DATE, TIME, PERSON, TEXT
print(Sys.time())
history_a = history_a %>%
rowwise() %>%
mutate("DATE" = strsplit(V1, split = "]") %>% #Get Time section
unlist() %>%
.[1] %>%
strsplit(split = ",") %>% #Get date
unlist() %>%
.[1] %>%
substring(first = 2),
"TIME" = strsplit(V1, split = "]") %>% #Get Time section
unlist() %>%
.[1] %>%
strsplit(split = ",") %>% #Get clock time
unlist() %>%
.[2] %>%
trimws(),
"PERSON" = strsplit(V1, split = "]") %>% #Get Name section
unlist() %>%
.[2:length(.)] %>% #In case there is a "]" in the text, we need to restitch the string
paste(collapse = "]") %>%
strsplit(split = ":") %>%
unlist() %>%
.[1] %>%
trimws() %>%
strsplit(split = " ") %>% #Keep first name only
unlist() %>%
.[1],
"TEXT" = strsplit(V1, split = "]") %>% #Get Text section
unlist() %>%
.[2:length(.)] %>% #In case there is a "]" in the text, we need to restitch the string
paste(collapse = "]") %>%
strsplit(split = ":") %>%
unlist() %>%
.[2:length(.)] %>% #In case there is a ":" in the text, we need to restitch the string
paste(collapse = ":") %>%
trimws()) %>%
as.data.frame()
history_a = read.csv("history_draft_3.csv", stringsAsFactors = FALSE)
for_analysis = history_a %>%
rowwise() %>%
mutate(YEAR = mdy(DATE) %>% year(),
HOUR = strptime(TIME, "%H:%M:%S") %>% hour(),
weekday = weekdays(mdy(DATE)),
num_char = nchar(TEXT),
num_words = TEXT %>%
strsplit(split = " ") %>%
unlist() %>%
length()) %>%
as.data.frame()
